output "cluster_id" {
  description = "EKS cluster ID"
  value       = aws_eks_cluster.main.id
}

output "cluster_arn" {
  description = "EKS cluster ARN"
  value       = aws_eks_cluster.main.arn
}

output "cluster_endpoint" {
  description = "EKS cluster endpoint"
  value       = aws_eks_cluster.main.endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = aws_eks_cluster.main.vpc_config[0].cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = {
    apiVersion      = "v1"
    kind            = "Config"
    current_context = aws_eks_cluster.main.arn
    clusters = [{
      name = aws_eks_cluster.main.arn
      cluster = {
        certificate_authority_data = aws_eks_cluster.main.certificate_authority[0].data
        server                     = aws_eks_cluster.main.endpoint
      }
    }]
    contexts = [{
      name = aws_eks_cluster.main.arn
      context = {
        cluster = aws_eks_cluster.main.arn
        user    = aws_eks_cluster.main.arn
      }
    }]
    users = [{
      name = aws_eks_cluster.main.arn
      user = {
        exec = {
          apiVersion = "client.authentication.k8s.io/v1beta1"
          command    = "aws"
          args = [
            "eks",
            "get-token",
            "--cluster-name",
            aws_eks_cluster.main.name
          ]
        }
      }
    }]
  }
}

output "rancher_url" {
  description = "URL to access Rancher"
  value       = length(kubernetes_ingress_v1.rancher_ingress) > 0 ? format("http://%s", try(kubernetes_ingress_v1.rancher_ingress[0].status[0].load_balancer[0].ingress[0].hostname, "pending")) : "pending"
}

output "rancher_load_balancer_hostname" {
  description = "Rancher ALB hostname"
  value       = length(kubernetes_ingress_v1.rancher_ingress) > 0 ? try(kubernetes_ingress_v1.rancher_ingress[0].status[0].load_balancer[0].ingress[0].hostname, "pending") : "pending"
}

output "rancher_service_name" {
  description = "Rancher service name"
  value       = "rancher"
}

output "rancher_ingress_name" {
  description = "Rancher ingress name"
  value       = length(kubernetes_ingress_v1.rancher_ingress) > 0 ? kubernetes_ingress_v1.rancher_ingress[0].metadata[0].name : ""
}

output "cluster_name" {
  description = "EKS cluster name"
  value       = aws_eks_cluster.main.name
}

output "cluster_version" {
  description = "EKS cluster version"
  value       = aws_eks_cluster.main.version
}

output "cluster_oidc_issuer_url" {
  description = "EKS cluster OIDC issuer URL"
  value       = aws_eks_cluster.main.identity[0].oidc[0].issuer
}

output "rancher_namespace" {
  description = "Namespace where Rancher is deployed"
  value       = "cattle-system"
}

output "rancher_load_balancer_url" {
  description = "Public URL (ALB) to access Rancher"
  value       = length(kubernetes_ingress_v1.rancher_ingress) > 0 ? format("http://%s", try(kubernetes_ingress_v1.rancher_ingress[0].status[0].load_balancer[0].ingress[0].hostname, "pending")) : "pending"
}

output "cluster_certificate_authority" {
  description = "EKS cluster certificate authority data (base64)"
  value       = aws_eks_cluster.main.certificate_authority[0].data
}
